# coding: utf-8

"""
    Alan's Speakeasy

    Full API for Alan's Speakeasy, Version 0.1

    The version of the OpenAPI document: 0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from openapi.models.chat_room_admin_info import ChatRoomAdminInfo
from openapi.models.generated_assignment import GeneratedAssignment
from openapi.models.selected_users import SelectedUsers
from typing import Optional, Set
from typing_extensions import Self

class AssignmentGeneratorObject(BaseModel):
    """
    AssignmentGeneratorObject
    """ # noqa: E501
    humans: List[StrictStr]
    bots: List[StrictStr]
    admins: List[StrictStr]
    evaluator: List[StrictStr]
    assistant: List[StrictStr]
    active: List[StrictStr]
    selected: SelectedUsers
    assignments: List[GeneratedAssignment]
    prompts: List[StrictStr]
    form_name: StrictStr = Field(alias="formName")
    bots_per_human: StrictInt = Field(alias="botsPerHuman")
    duration: StrictInt
    round: StrictInt
    remaining_time: StrictInt = Field(alias="remainingTime")
    rooms: List[ChatRoomAdminInfo]
    __properties: ClassVar[List[str]] = ["humans", "bots", "admins", "evaluator", "assistant", "active", "selected", "assignments", "prompts", "formName", "botsPerHuman", "duration", "round", "remainingTime", "rooms"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AssignmentGeneratorObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of selected
        if self.selected:
            _dict['selected'] = self.selected.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in assignments (list)
        _items = []
        if self.assignments:
            for _item_assignments in self.assignments:
                if _item_assignments:
                    _items.append(_item_assignments.to_dict())
            _dict['assignments'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in rooms (list)
        _items = []
        if self.rooms:
            for _item_rooms in self.rooms:
                if _item_rooms:
                    _items.append(_item_rooms.to_dict())
            _dict['rooms'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AssignmentGeneratorObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "humans": obj.get("humans"),
            "bots": obj.get("bots"),
            "admins": obj.get("admins"),
            "evaluator": obj.get("evaluator"),
            "assistant": obj.get("assistant"),
            "active": obj.get("active"),
            "selected": SelectedUsers.from_dict(obj["selected"]) if obj.get("selected") is not None else None,
            "assignments": [GeneratedAssignment.from_dict(_item) for _item in obj["assignments"]] if obj.get("assignments") is not None else None,
            "prompts": obj.get("prompts"),
            "formName": obj.get("formName"),
            "botsPerHuman": obj.get("botsPerHuman"),
            "duration": obj.get("duration"),
            "round": obj.get("round"),
            "remainingTime": obj.get("remainingTime"),
            "rooms": [ChatRoomAdminInfo.from_dict(_item) for _item in obj["rooms"]] if obj.get("rooms") is not None else None
        })
        return _obj


